{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mari menjadi Software Quality Engineer | Penguji Mutu Program Komputer",
    "description": "",
    "home_page_url": "https://penguji.id",
    "feed_url": "https://penguji.id/feed.json",
    "user_comment": "",
    "icon": "https://penguji.id/media/website/logo_bawah_300.jpg",
    "author": {
        "name": "Fachrul Choliluddin"
    },
    "items": [
        {
            "id": "https://penguji.id/apa-itu-pengujian-aplikasi-komputer-software-testing/",
            "url": "https://penguji.id/apa-itu-pengujian-aplikasi-komputer-software-testing/",
            "title": "Apa itu Pengujian Aplikasi Komputer?",
            "summary": "Pada kesempatan kali ini kita akan bahas secara umum mengenai Software testing (pengujian program komputer). Kita akan kupas lebih dalam terkait dengan Apa, Kenapa, Siapa, Kapan, Bagaimana (4W1H) pengujian program komputer itu. Pengujian aplikasi/program komputer (software testing) adalah proses menilai kualitas sebuah sistem komputer, salah&hellip;",
            "content_html": "<p>Pada kesempatan kali ini kita akan bahas secara umum mengenai Software testing (pengujian program komputer). Kita akan kupas lebih dalam terkait dengan Apa, Kenapa, Siapa, Kapan, Bagaimana (4W1H) pengujian program komputer itu.</p>\n<hr>\n<h2 id=\"mcetoc_1dc7c7gdd0\">Apa itu software testing (pengujian aplikasi komputer)?</h2>\n<p>Pengujian aplikasi/program komputer (software testing) adalah proses menilai kualitas sebuah sistem komputer, salah satu caranya adalah dengan mencari ketidak sesuaian program (bugs), galat (error) dengan harapan pengguna dalam dokumen requirement.</p>\n<p>Pengujian seperti ini akan bisa mengukur kualitas program secara garis besar dari segi ketepatan (correctness), kelengkapan (completeness), kebergunaan (usability), kinerja (performance) dan juga segi fungsional ataupun non-fungsional lainya</p>\n<hr>\n<h2 id=\"mcetoc_1dc7c85sf1\">Kenapa program perlu diuji?</h2>\n<p>Proses pengujian sangat diperlukan, khususnya untuk mencari ketidak sesuaian (kesalahan/bug) yang ada pada aplikasi komputer yang mana bisa jadi ini menimbulkan kecelakaan/kerugian nantinya.</p>\n<p>Contohnya:</p>\n<ul>\n<li>Kesalahan pada aplikasi yang ada pada perangkat medis, bisa jadi berpotensi mengancam jiwa pasien</li>\n<li>Kesalahan pemantau limbah nuklir yang berpotensi mengancam kelestarian lingkungan</li>\n<li>Kesalahan perhitungan pada perhitungan nilai tukar rupiah pada aplikasi perbangkan/keuangan yang berpotensi mengakibatkan kerugian besar bagi perusahaan</li>\n</ul>\n<hr>\n<h2 id=\"mcetoc_1dc7c9n8b2\">Siapa yang melakukan pengujian?</h2>\n<p>Di dalam proses pengembangan agile, kualitas program adalah tanggung jawab bersama, karena kualitas aplikasi komputer / program bukan ditentukan oleh penguji (tester) semata yang berperan sebagai penjaga gawang. Seorang penguji tidak terbatas hanya melakukan pengujian berdasarkan acceptance criteria, karena semua orang dalam tim harus bisa melakukannya, melainkan bekerja sama dengan developer dan product owner untuk memastikan tingkat standar kualitas seperti apa yang harus dicapai bersama.</p>\n<p>Bisa jadi bentuk kerja sama ini meliputi pembuatan acceptance criteria yang tepat, kesepakatan definition of done, diskusi dengan developer mengenai strategi pengujian dan pendekatan otomatisasi pengujian yang sesuai, bahkan seorang penguji yang cemerlang mampu mengajarkan ilmu dan cara pengujian yang baik kepada tim, bahkan bisa memberikan pengaruh dan masukan bagi proses pengembangan aplikasi. </p>\n<hr>\n<h2 id=\"mcetoc_1dc7cb6rq5\">Kapan harusnya pengujian dimulai?</h2>\n<p>Itu sebenarnya disesuaikan dengan proses SDLC (software development life cycle) model yang dijalankan oleh tim pengembangan, bisa jadi ada fase khusus untuk pengujian, ataupun bisa jadi fase pengujian membaur dengan fase impementasi kode oleh tim pengembang, yang menarik ada satu mitos (yang saya yakini) bahwa katanya pengujian hanya bisa dilakukan ketika implementasi oleh pengembang sudah selesai, tetapi ternyata pengujian itu bisa (harusnya) dimulai bahkan ketika kode belum ditulis.</p>\n<p>pengujian bisa berjalan beriringan (paralel) dengan fase implementasi fitur oleh tim pengembang, contohnya:</p>\n<table>\n<tbody>\n<tr>\n<td><strong>Fase</strong></td>\n<td><strong>Aktifitas pengujian</strong></td>\n</tr>\n<tr>\n<td>Backlog grooming</td>\n<td>Mitigasi risiko, dan potensi efek samping dari requirement tsb, membuat acceptance criteria</td>\n</tr>\n<tr>\n<td>Sprint planning</td>\n<td>Memaparkan skenario pengujian pada backlog</td>\n</tr>\n<tr>\n<td>Sprint</td>\n<td>Menguji aplikasi secara bertahap dan berkala, kerja sama (pairing) dengan developer terkait assertion (pemastian)</td>\n</tr>\n<tr>\n<td>Deployment</td>\n<td>Memantau crashlog / notifikasi kesalahan program</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"mcetoc_1dc7cerlr6\">Bagaimana dikatakan pengujian telah selesai?</h2>\n<p>Tidak ada jawaban pasti dalam menjawab pertanyaan ini, pengujian tidaklah memiliki garis akhir yang jelas, tetapi kita bisa menggunakan \"risk-based testing\" untuk menemukan seberapa luas cakupan pengujian akan dilaksanakan, sehingga kita bisa memfokuskan waktu dan upaya dalam menguji bagian mana saja yang sangat penting.</p>\n<p>Pengujian haruslah menyediakan informasi memadai mengenai status dan kestabilan dari sebuah aplikasi komputer, sehingga tim dan pemangku kepentingan bisa mengambil keputusan yang tepat mengenai peluncuran (fitur) aplikasi ataukah tindakan lebih lanjut terkait pengujian jika diperlukan</p>\n<h2 id=\"mcetoc_1dcrokgs60\">Prinsip pengujian</h2>\n<p>Berdasarkan ISTQB, ada 7 hal dalam prisip pengujian</p>\n<ol>\n<li>Pengujian menunjukan adanya masalah (Testing shows the presence of defects)</li>\n<li>Pengujian secara menyeluruh adalah kemustahilan (Exhaustive testing is impossible)</li>\n<li>Pengujian secara dini (Early testing)</li>\n<li>Pengelompokan masalah (Defect clustering)</li>\n<li>Kekebalan masalah (Pesticide Paradox)</li>\n<li>Pengujian itu relatif dari aplikasinya (Testing is context dependent)</li>\n<li>Tidak ditemukan masalah pada pengujian bukan berarti aplikasi tersebut bebas masalah (Absence of errors fallacy)</li>\n</ol>\n<p>Di artikel lain sebenarnya ada lagi tambahan prinsip:</p>\n<ul>\n<li>Testing must be done by an independent party.</li>\n<li>Assign best personnel to the task.</li>\n<li>Test for invalid and unexpected input conditions as well as valid conditions.</li>\n<li>Keep software static during test.</li>\n<li>Provide expected test results if possible.</li>\n</ul>\n<p> </p>\n<p>Referensi lanjutan:</p>\n<ul>\n<li><a href=\"https://www.guru99.com/software-testing-introduction-importance.html\">https://www.guru99.com/software-testing-introduction-importance.html</a></li>\n<li><a href=\"https://testautomationu.applitools.com/the-whole-team-approach-to-continuous-testing/index.html\">https://testautomationu.applitools.com/the-whole-team-approach-to-continuous-testing/index.html</a> </li>\n</ul>",
            "image": "https://penguji.id/media/posts/2/background-blank-craft-301703.jpg",
            "author": {
                "name": "Fachrul Choliluddin"
            },
            "tags": [
            ],
            "date_published": "2019-06-01T16:25:57+07:00",
            "date_modified": "2019-06-08T21:51:49+07:00"
        },
        {
            "id": "https://penguji.id/cara-menjadi-software-quality-assurance-tester-test-engineer/",
            "url": "https://penguji.id/cara-menjadi-software-quality-assurance-tester-test-engineer/",
            "title": "Menjadi Penguji Program Komputer (software tester)",
            "summary": "Selamat datang teman-teman, Pada kesempatan kali ini kita akan belajar sama-sama tentang Software testing (pengujian program komputer) sedari tingkat pemula atau baru meniti karir di dunia per-testingan. Kita akan coba membahas mengenai konsep dan metode pengujian yang telah saya praktikan sehari-hari. Kita awali dari tema&hellip;",
            "content_html": "<p>Selamat datang teman-teman,</p>\n<p>Pada kesempatan kali ini kita akan belajar sama-sama tentang Software testing (pengujian program komputer) sedari tingkat pemula atau baru meniti karir di dunia per-testingan. Kita akan coba membahas mengenai konsep dan metode pengujian yang telah saya praktikan sehari-hari.</p>\n<p>Kita awali dari tema dasar pengujian program komputer hingga hal-hal yang lebih rumit lagi nantinya.</p>\n<blockquote>\n<p>Halaman ini berisi daftar isi dari artikel yang telah dituliskan, jadi akan selalu diperbaharui secara berkala ya, sering-sering berkunjung jadinya ya :) </p>\n</blockquote>\n<h2 id=\"mcetoc_1dc7bstvs1\">Pengujian Manual untuk pemula</h2>\n<p>Pada bagian ini kita akan bahas mengenai beberpaa teori pengujian, diantaranya</p>\n<ul>\n<li><a href=\"#INTERNAL_LINK#/post/2\" target=\"_blank\" rel=\"noopener noreferrer\">Apa itu Pengujian Program komputer (software testing)?</a></li>\n<li>Kenapa perlu adanya pengujian?</li>\n</ul>",
            "image": "https://penguji.id/media/posts/1/artificial-intelligence-automation-bookcase-1329068.jpg",
            "author": {
                "name": "Fachrul Choliluddin"
            },
            "tags": [
            ],
            "date_published": "2019-06-01T06:23:08+07:00",
            "date_modified": "2019-06-02T11:40:25+07:00"
        }
    ]
}
